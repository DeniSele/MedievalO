// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Service {
  /// <summary>
  /// TODO: Define the UsersService service and its methods. Feel free
  /// to change the name of UsersService to better-suit your naming
  /// conventions.
  /// </summary>
  public static partial class UsersService
  {
    static readonly string __ServiceName = "service.UsersService";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.VersionResponse> __Marshaller_service_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.VersionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Service.VersionResponse> __Method_GetVersion = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Service.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVersion",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_service_VersionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Service.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UsersService</summary>
    [grpc::BindServiceMethod(typeof(UsersService), "BindService")]
    public abstract partial class UsersServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Service.VersionResponse> GetVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UsersService</summary>
    public partial class UsersServiceClient : grpc::ClientBase<UsersServiceClient>
    {
      /// <summary>Creates a new client for UsersService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UsersServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UsersService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UsersServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UsersServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UsersServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Service.VersionResponse GetVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.VersionResponse GetVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersion, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.VersionResponse> GetVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.VersionResponse> GetVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UsersServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UsersServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UsersServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetVersion, serviceImpl.GetVersion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UsersServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Service.VersionResponse>(serviceImpl.GetVersion));
    }

  }
  public static partial class Users
  {
    static readonly string __ServiceName = "service.Users";

    static readonly grpc::Marshaller<global::Service.CreateUserRequest> __Marshaller_service_CreateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.CreateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.CreateUserResponse> __Marshaller_service_CreateUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.CreateUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadUserRequest> __Marshaller_service_ReadUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadUserResponse> __Marshaller_service_ReadUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateUserRequest> __Marshaller_service_UpdateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateUserResponse> __Marshaller_service_UpdateUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.DeleteUserRequest> __Marshaller_service_DeleteUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.DeleteUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.DeleteUserResponse> __Marshaller_service_DeleteUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.DeleteUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ListUsersRequest> __Marshaller_service_ListUsersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ListUsersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ListUsersResponse> __Marshaller_service_ListUsersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ListUsersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.LoginRequest> __Marshaller_service_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.LoginResponse> __Marshaller_service_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.LoginResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Service.CreateUserRequest, global::Service.CreateUserResponse> __Method_Create = new grpc::Method<global::Service.CreateUserRequest, global::Service.CreateUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_service_CreateUserRequest,
        __Marshaller_service_CreateUserResponse);

    static readonly grpc::Method<global::Service.ReadUserRequest, global::Service.ReadUserResponse> __Method_Read = new grpc::Method<global::Service.ReadUserRequest, global::Service.ReadUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_service_ReadUserRequest,
        __Marshaller_service_ReadUserResponse);

    static readonly grpc::Method<global::Service.UpdateUserRequest, global::Service.UpdateUserResponse> __Method_Update = new grpc::Method<global::Service.UpdateUserRequest, global::Service.UpdateUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_service_UpdateUserRequest,
        __Marshaller_service_UpdateUserResponse);

    static readonly grpc::Method<global::Service.DeleteUserRequest, global::Service.DeleteUserResponse> __Method_Delete = new grpc::Method<global::Service.DeleteUserRequest, global::Service.DeleteUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_service_DeleteUserRequest,
        __Marshaller_service_DeleteUserResponse);

    static readonly grpc::Method<global::Service.ListUsersRequest, global::Service.ListUsersResponse> __Method_List = new grpc::Method<global::Service.ListUsersRequest, global::Service.ListUsersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_service_ListUsersRequest,
        __Marshaller_service_ListUsersResponse);

    static readonly grpc::Method<global::Service.LoginRequest, global::Service.LoginResponse> __Method_Login = new grpc::Method<global::Service.LoginRequest, global::Service.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_service_LoginRequest,
        __Marshaller_service_LoginResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Service.ServiceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Users</summary>
    [grpc::BindServiceMethod(typeof(Users), "BindService")]
    public abstract partial class UsersBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Service.CreateUserResponse> Create(global::Service.CreateUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.ReadUserResponse> Read(global::Service.ReadUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.UpdateUserResponse> Update(global::Service.UpdateUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.DeleteUserResponse> Delete(global::Service.DeleteUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.ListUsersResponse> List(global::Service.ListUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.LoginResponse> Login(global::Service.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Users</summary>
    public partial class UsersClient : grpc::ClientBase<UsersClient>
    {
      /// <summary>Creates a new client for Users</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UsersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Users that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UsersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UsersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UsersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Service.CreateUserResponse Create(global::Service.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.CreateUserResponse Create(global::Service.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.CreateUserResponse> CreateAsync(global::Service.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.CreateUserResponse> CreateAsync(global::Service.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Service.ReadUserResponse Read(global::Service.ReadUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ReadUserResponse Read(global::Service.ReadUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadUserResponse> ReadAsync(global::Service.ReadUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadUserResponse> ReadAsync(global::Service.ReadUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      public virtual global::Service.UpdateUserResponse Update(global::Service.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.UpdateUserResponse Update(global::Service.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateUserResponse> UpdateAsync(global::Service.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateUserResponse> UpdateAsync(global::Service.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Service.DeleteUserResponse Delete(global::Service.DeleteUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.DeleteUserResponse Delete(global::Service.DeleteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.DeleteUserResponse> DeleteAsync(global::Service.DeleteUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.DeleteUserResponse> DeleteAsync(global::Service.DeleteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::Service.ListUsersResponse List(global::Service.ListUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ListUsersResponse List(global::Service.ListUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ListUsersResponse> ListAsync(global::Service.ListUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ListUsersResponse> ListAsync(global::Service.ListUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      public virtual global::Service.LoginResponse Login(global::Service.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.LoginResponse Login(global::Service.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.LoginResponse> LoginAsync(global::Service.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.LoginResponse> LoginAsync(global::Service.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UsersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UsersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UsersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Login, serviceImpl.Login).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UsersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.CreateUserRequest, global::Service.CreateUserResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ReadUserRequest, global::Service.ReadUserResponse>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.UpdateUserRequest, global::Service.UpdateUserResponse>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.DeleteUserRequest, global::Service.DeleteUserResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ListUsersRequest, global::Service.ListUsersResponse>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.LoginRequest, global::Service.LoginResponse>(serviceImpl.Login));
    }

  }
  public static partial class StoreItems
  {
    static readonly string __ServiceName = "service.StoreItems";

    static readonly grpc::Marshaller<global::Service.CreateStoreItemRequest> __Marshaller_service_CreateStoreItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.CreateStoreItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.CreateStoreItemResponse> __Marshaller_service_CreateStoreItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.CreateStoreItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadStoreItemRequest> __Marshaller_service_ReadStoreItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadStoreItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadStoreItemResponse> __Marshaller_service_ReadStoreItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadStoreItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateStoreItemRequest> __Marshaller_service_UpdateStoreItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateStoreItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateStoreItemResponse> __Marshaller_service_UpdateStoreItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateStoreItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.DeleteStoreItemRequest> __Marshaller_service_DeleteStoreItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.DeleteStoreItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.DeleteStoreItemResponse> __Marshaller_service_DeleteStoreItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.DeleteStoreItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ListStoreItemsRequest> __Marshaller_service_ListStoreItemsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ListStoreItemsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ListStoreItemsResponse> __Marshaller_service_ListStoreItemsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ListStoreItemsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.BuyByUserRequest> __Marshaller_service_BuyByUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.BuyByUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.BuyByUserResponse> __Marshaller_service_BuyByUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.BuyByUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.GetUserItemsIdsRequest> __Marshaller_service_GetUserItemsIdsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.GetUserItemsIdsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.GetUserItemsIdsResponse> __Marshaller_service_GetUserItemsIdsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.GetUserItemsIdsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Service.CreateStoreItemRequest, global::Service.CreateStoreItemResponse> __Method_Create = new grpc::Method<global::Service.CreateStoreItemRequest, global::Service.CreateStoreItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_service_CreateStoreItemRequest,
        __Marshaller_service_CreateStoreItemResponse);

    static readonly grpc::Method<global::Service.ReadStoreItemRequest, global::Service.ReadStoreItemResponse> __Method_Read = new grpc::Method<global::Service.ReadStoreItemRequest, global::Service.ReadStoreItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_service_ReadStoreItemRequest,
        __Marshaller_service_ReadStoreItemResponse);

    static readonly grpc::Method<global::Service.UpdateStoreItemRequest, global::Service.UpdateStoreItemResponse> __Method_Update = new grpc::Method<global::Service.UpdateStoreItemRequest, global::Service.UpdateStoreItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_service_UpdateStoreItemRequest,
        __Marshaller_service_UpdateStoreItemResponse);

    static readonly grpc::Method<global::Service.DeleteStoreItemRequest, global::Service.DeleteStoreItemResponse> __Method_Delete = new grpc::Method<global::Service.DeleteStoreItemRequest, global::Service.DeleteStoreItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_service_DeleteStoreItemRequest,
        __Marshaller_service_DeleteStoreItemResponse);

    static readonly grpc::Method<global::Service.ListStoreItemsRequest, global::Service.ListStoreItemsResponse> __Method_List = new grpc::Method<global::Service.ListStoreItemsRequest, global::Service.ListStoreItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_service_ListStoreItemsRequest,
        __Marshaller_service_ListStoreItemsResponse);

    static readonly grpc::Method<global::Service.BuyByUserRequest, global::Service.BuyByUserResponse> __Method_BuyByUser = new grpc::Method<global::Service.BuyByUserRequest, global::Service.BuyByUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BuyByUser",
        __Marshaller_service_BuyByUserRequest,
        __Marshaller_service_BuyByUserResponse);

    static readonly grpc::Method<global::Service.GetUserItemsIdsRequest, global::Service.GetUserItemsIdsResponse> __Method_GetUserItemsIds = new grpc::Method<global::Service.GetUserItemsIdsRequest, global::Service.GetUserItemsIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserItemsIds",
        __Marshaller_service_GetUserItemsIdsRequest,
        __Marshaller_service_GetUserItemsIdsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Service.ServiceReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of StoreItems</summary>
    [grpc::BindServiceMethod(typeof(StoreItems), "BindService")]
    public abstract partial class StoreItemsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Service.CreateStoreItemResponse> Create(global::Service.CreateStoreItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.ReadStoreItemResponse> Read(global::Service.ReadStoreItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.UpdateStoreItemResponse> Update(global::Service.UpdateStoreItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.DeleteStoreItemResponse> Delete(global::Service.DeleteStoreItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.ListStoreItemsResponse> List(global::Service.ListStoreItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.BuyByUserResponse> BuyByUser(global::Service.BuyByUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.GetUserItemsIdsResponse> GetUserItemsIds(global::Service.GetUserItemsIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StoreItems</summary>
    public partial class StoreItemsClient : grpc::ClientBase<StoreItemsClient>
    {
      /// <summary>Creates a new client for StoreItems</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StoreItemsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StoreItems that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StoreItemsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StoreItemsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StoreItemsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Service.CreateStoreItemResponse Create(global::Service.CreateStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.CreateStoreItemResponse Create(global::Service.CreateStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.CreateStoreItemResponse> CreateAsync(global::Service.CreateStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.CreateStoreItemResponse> CreateAsync(global::Service.CreateStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Service.ReadStoreItemResponse Read(global::Service.ReadStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ReadStoreItemResponse Read(global::Service.ReadStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadStoreItemResponse> ReadAsync(global::Service.ReadStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadStoreItemResponse> ReadAsync(global::Service.ReadStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      public virtual global::Service.UpdateStoreItemResponse Update(global::Service.UpdateStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.UpdateStoreItemResponse Update(global::Service.UpdateStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateStoreItemResponse> UpdateAsync(global::Service.UpdateStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateStoreItemResponse> UpdateAsync(global::Service.UpdateStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Service.DeleteStoreItemResponse Delete(global::Service.DeleteStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.DeleteStoreItemResponse Delete(global::Service.DeleteStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.DeleteStoreItemResponse> DeleteAsync(global::Service.DeleteStoreItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.DeleteStoreItemResponse> DeleteAsync(global::Service.DeleteStoreItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::Service.ListStoreItemsResponse List(global::Service.ListStoreItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ListStoreItemsResponse List(global::Service.ListStoreItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ListStoreItemsResponse> ListAsync(global::Service.ListStoreItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ListStoreItemsResponse> ListAsync(global::Service.ListStoreItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      public virtual global::Service.BuyByUserResponse BuyByUser(global::Service.BuyByUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyByUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.BuyByUserResponse BuyByUser(global::Service.BuyByUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BuyByUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.BuyByUserResponse> BuyByUserAsync(global::Service.BuyByUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyByUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.BuyByUserResponse> BuyByUserAsync(global::Service.BuyByUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BuyByUser, null, options, request);
      }
      public virtual global::Service.GetUserItemsIdsResponse GetUserItemsIds(global::Service.GetUserItemsIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserItemsIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.GetUserItemsIdsResponse GetUserItemsIds(global::Service.GetUserItemsIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserItemsIds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.GetUserItemsIdsResponse> GetUserItemsIdsAsync(global::Service.GetUserItemsIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserItemsIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.GetUserItemsIdsResponse> GetUserItemsIdsAsync(global::Service.GetUserItemsIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserItemsIds, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StoreItemsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StoreItemsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StoreItemsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_BuyByUser, serviceImpl.BuyByUser)
          .AddMethod(__Method_GetUserItemsIds, serviceImpl.GetUserItemsIds).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StoreItemsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.CreateStoreItemRequest, global::Service.CreateStoreItemResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ReadStoreItemRequest, global::Service.ReadStoreItemResponse>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.UpdateStoreItemRequest, global::Service.UpdateStoreItemResponse>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.DeleteStoreItemRequest, global::Service.DeleteStoreItemResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ListStoreItemsRequest, global::Service.ListStoreItemsResponse>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_BuyByUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.BuyByUserRequest, global::Service.BuyByUserResponse>(serviceImpl.BuyByUser));
      serviceBinder.AddMethod(__Method_GetUserItemsIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.GetUserItemsIdsRequest, global::Service.GetUserItemsIdsResponse>(serviceImpl.GetUserItemsIds));
    }

  }
  public static partial class UsersStats
  {
    static readonly string __ServiceName = "service.UsersStats";

    static readonly grpc::Marshaller<global::Service.ReadUserStatsRequest> __Marshaller_service_ReadUserStatsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadUserStatsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadUserStatsResponse> __Marshaller_service_ReadUserStatsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadUserStatsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateUserStatsRequest> __Marshaller_service_UpdateUserStatsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateUserStatsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateUserStatsResponse> __Marshaller_service_UpdateUserStatsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateUserStatsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Service.ReadUserStatsRequest, global::Service.ReadUserStatsResponse> __Method_GetStats = new grpc::Method<global::Service.ReadUserStatsRequest, global::Service.ReadUserStatsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStats",
        __Marshaller_service_ReadUserStatsRequest,
        __Marshaller_service_ReadUserStatsResponse);

    static readonly grpc::Method<global::Service.UpdateUserStatsRequest, global::Service.UpdateUserStatsResponse> __Method_UpdateStats = new grpc::Method<global::Service.UpdateUserStatsRequest, global::Service.UpdateUserStatsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateStats",
        __Marshaller_service_UpdateUserStatsRequest,
        __Marshaller_service_UpdateUserStatsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Service.ServiceReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of UsersStats</summary>
    [grpc::BindServiceMethod(typeof(UsersStats), "BindService")]
    public abstract partial class UsersStatsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Service.ReadUserStatsResponse> GetStats(global::Service.ReadUserStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.UpdateUserStatsResponse> UpdateStats(global::Service.UpdateUserStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UsersStats</summary>
    public partial class UsersStatsClient : grpc::ClientBase<UsersStatsClient>
    {
      /// <summary>Creates a new client for UsersStats</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UsersStatsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UsersStats that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UsersStatsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UsersStatsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UsersStatsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Service.ReadUserStatsResponse GetStats(global::Service.ReadUserStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ReadUserStatsResponse GetStats(global::Service.ReadUserStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStats, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadUserStatsResponse> GetStatsAsync(global::Service.ReadUserStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadUserStatsResponse> GetStatsAsync(global::Service.ReadUserStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStats, null, options, request);
      }
      public virtual global::Service.UpdateUserStatsResponse UpdateStats(global::Service.UpdateUserStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.UpdateUserStatsResponse UpdateStats(global::Service.UpdateUserStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateStats, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateUserStatsResponse> UpdateStatsAsync(global::Service.UpdateUserStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateUserStatsResponse> UpdateStatsAsync(global::Service.UpdateUserStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateStats, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UsersStatsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UsersStatsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UsersStatsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetStats, serviceImpl.GetStats)
          .AddMethod(__Method_UpdateStats, serviceImpl.UpdateStats).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UsersStatsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ReadUserStatsRequest, global::Service.ReadUserStatsResponse>(serviceImpl.GetStats));
      serviceBinder.AddMethod(__Method_UpdateStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.UpdateUserStatsRequest, global::Service.UpdateUserStatsResponse>(serviceImpl.UpdateStats));
    }

  }
  public static partial class NewsService
  {
    static readonly string __ServiceName = "service.NewsService";

    static readonly grpc::Marshaller<global::Service.CreateNewsRequest> __Marshaller_service_CreateNewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.CreateNewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.CreateNewsResponse> __Marshaller_service_CreateNewsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.CreateNewsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadNewsRequest> __Marshaller_service_ReadNewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadNewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ReadNewsResponse> __Marshaller_service_ReadNewsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ReadNewsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateNewsRequest> __Marshaller_service_UpdateNewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateNewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.UpdateNewsResponse> __Marshaller_service_UpdateNewsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.UpdateNewsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ListNewsRequest> __Marshaller_service_ListNewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ListNewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.ListNewsResponse> __Marshaller_service_ListNewsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.ListNewsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Service.CreateNewsRequest, global::Service.CreateNewsResponse> __Method_Create = new grpc::Method<global::Service.CreateNewsRequest, global::Service.CreateNewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_service_CreateNewsRequest,
        __Marshaller_service_CreateNewsResponse);

    static readonly grpc::Method<global::Service.ReadNewsRequest, global::Service.ReadNewsResponse> __Method_Read = new grpc::Method<global::Service.ReadNewsRequest, global::Service.ReadNewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_service_ReadNewsRequest,
        __Marshaller_service_ReadNewsResponse);

    static readonly grpc::Method<global::Service.UpdateNewsRequest, global::Service.UpdateNewsResponse> __Method_Update = new grpc::Method<global::Service.UpdateNewsRequest, global::Service.UpdateNewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_service_UpdateNewsRequest,
        __Marshaller_service_UpdateNewsResponse);

    static readonly grpc::Method<global::Service.ListNewsRequest, global::Service.ListNewsResponse> __Method_List = new grpc::Method<global::Service.ListNewsRequest, global::Service.ListNewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_service_ListNewsRequest,
        __Marshaller_service_ListNewsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Service.ServiceReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of NewsService</summary>
    [grpc::BindServiceMethod(typeof(NewsService), "BindService")]
    public abstract partial class NewsServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Service.CreateNewsResponse> Create(global::Service.CreateNewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.ReadNewsResponse> Read(global::Service.ReadNewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.UpdateNewsResponse> Update(global::Service.UpdateNewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Service.ListNewsResponse> List(global::Service.ListNewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NewsService</summary>
    public partial class NewsServiceClient : grpc::ClientBase<NewsServiceClient>
    {
      /// <summary>Creates a new client for NewsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NewsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NewsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NewsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NewsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NewsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Service.CreateNewsResponse Create(global::Service.CreateNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.CreateNewsResponse Create(global::Service.CreateNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.CreateNewsResponse> CreateAsync(global::Service.CreateNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.CreateNewsResponse> CreateAsync(global::Service.CreateNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Service.ReadNewsResponse Read(global::Service.ReadNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ReadNewsResponse Read(global::Service.ReadNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadNewsResponse> ReadAsync(global::Service.ReadNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ReadNewsResponse> ReadAsync(global::Service.ReadNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      public virtual global::Service.UpdateNewsResponse Update(global::Service.UpdateNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.UpdateNewsResponse Update(global::Service.UpdateNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateNewsResponse> UpdateAsync(global::Service.UpdateNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.UpdateNewsResponse> UpdateAsync(global::Service.UpdateNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Service.ListNewsResponse List(global::Service.ListNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.ListNewsResponse List(global::Service.ListNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ListNewsResponse> ListAsync(global::Service.ListNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.ListNewsResponse> ListAsync(global::Service.ListNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NewsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NewsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NewsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NewsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.CreateNewsRequest, global::Service.CreateNewsResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ReadNewsRequest, global::Service.ReadNewsResponse>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.UpdateNewsRequest, global::Service.UpdateNewsResponse>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Service.ListNewsRequest, global::Service.ListNewsResponse>(serviceImpl.List));
    }

  }
}
#endregion
