// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: collection_operators.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from collection_operators.proto</summary>
public static partial class CollectionOperatorsReflection {

  #region Descriptor
  /// <summary>File descriptor for collection_operators.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CollectionOperatorsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Chpjb2xsZWN0aW9uX29wZXJhdG9ycy5wcm90bxoscHJvdG9jLWdlbi1zd2Fn",
          "Z2VyL29wdGlvbnMvYW5ub3RhdGlvbnMucHJvdG8iWwoMU29ydENyaXRlcmlh",
          "EgsKA3RhZxgBIAEoCRIiCgVvcmRlchgCIAEoDjITLlNvcnRDcml0ZXJpYS5P",
          "cmRlciIaCgVPcmRlchIHCgNBU0MQABIICgRERVNDEAEiSQoHU29ydGluZxIg",
          "Cgljcml0ZXJpYXMYASADKAsyDS5Tb3J0Q3JpdGVyaWE6HJJBGQoXMhFhdGxh",
          "cy5hcGkuc29ydGluZ5oCAQcimgEKDkZpZWxkU2VsZWN0aW9uEisKBmZpZWxk",
          "cxgBIAMoCzIbLkZpZWxkU2VsZWN0aW9uLkZpZWxkc0VudHJ5GjUKC0ZpZWxk",
          "c0VudHJ5EgsKA2tleRgBIAEoCRIVCgV2YWx1ZRgCIAEoCzIGLkZpZWxkOgI4",
          "ATokkkEhCh8yGWF0bGFzLmFwaS5maWVsZF9zZWxlY3Rpb26aAgEHImoKBUZp",
          "ZWxkEgwKBG5hbWUYASABKAkSHgoEc3VicxgCIAMoCzIQLkZpZWxkLlN1YnNF",
          "bnRyeRozCglTdWJzRW50cnkSCwoDa2V5GAEgASgJEhUKBXZhbHVlGAIgASgL",
          "MgYuRmllbGQ6AjgBItECCglGaWx0ZXJpbmcSJAoIb3BlcmF0b3IYASABKAsy",
          "EC5Mb2dpY2FsT3BlcmF0b3JIABIsChBzdHJpbmdfY29uZGl0aW9uGAIgASgL",
          "MhAuU3RyaW5nQ29uZGl0aW9uSAASLAoQbnVtYmVyX2NvbmRpdGlvbhgDIAEo",
          "CzIQLk51bWJlckNvbmRpdGlvbkgAEigKDm51bGxfY29uZGl0aW9uGAQgASgL",
          "Mg4uTnVsbENvbmRpdGlvbkgAEjcKFnN0cmluZ19hcnJheV9jb25kaXRpb24Y",
          "BSABKAsyFS5TdHJpbmdBcnJheUNvbmRpdGlvbkgAEjcKFm51bWJlcl9hcnJh",
          "eV9jb25kaXRpb24YBiABKAsyFS5OdW1iZXJBcnJheUNvbmRpdGlvbkgAOh6S",
          "QRsKGTITYXRsYXMuYXBpLmZpbHRlcmluZ5oCAQdCBgoEcm9vdCLzBQoPTG9n",
          "aWNhbE9wZXJhdG9yEikKDWxlZnRfb3BlcmF0b3IYASABKAsyEC5Mb2dpY2Fs",
          "T3BlcmF0b3JIABIxChVsZWZ0X3N0cmluZ19jb25kaXRpb24YAiABKAsyEC5T",
          "dHJpbmdDb25kaXRpb25IABIxChVsZWZ0X251bWJlcl9jb25kaXRpb24YAyAB",
          "KAsyEC5OdW1iZXJDb25kaXRpb25IABItChNsZWZ0X251bGxfY29uZGl0aW9u",
          "GAQgASgLMg4uTnVsbENvbmRpdGlvbkgAEjwKG2xlZnRfc3RyaW5nX2FycmF5",
          "X2NvbmRpdGlvbhgLIAEoCzIVLlN0cmluZ0FycmF5Q29uZGl0aW9uSAASPAob",
          "bGVmdF9udW1iZXJfYXJyYXlfY29uZGl0aW9uGAwgASgLMhUuTnVtYmVyQXJy",
          "YXlDb25kaXRpb25IABIqCg5yaWdodF9vcGVyYXRvchgFIAEoCzIQLkxvZ2lj",
          "YWxPcGVyYXRvckgBEjIKFnJpZ2h0X3N0cmluZ19jb25kaXRpb24YBiABKAsy",
          "EC5TdHJpbmdDb25kaXRpb25IARIyChZyaWdodF9udW1iZXJfY29uZGl0aW9u",
          "GAcgASgLMhAuTnVtYmVyQ29uZGl0aW9uSAESLgoUcmlnaHRfbnVsbF9jb25k",
          "aXRpb24YCCABKAsyDi5OdWxsQ29uZGl0aW9uSAESPQoccmlnaHRfc3RyaW5n",
          "X2FycmF5X2NvbmRpdGlvbhgNIAEoCzIVLlN0cmluZ0FycmF5Q29uZGl0aW9u",
          "SAESPQoccmlnaHRfbnVtYmVyX2FycmF5X2NvbmRpdGlvbhgOIAEoCzIVLk51",
          "bWJlckFycmF5Q29uZGl0aW9uSAESIwoEdHlwZRgJIAEoDjIVLkxvZ2ljYWxP",
          "cGVyYXRvci5UeXBlEhMKC2lzX25lZ2F0aXZlGAogASgIIhcKBFR5cGUSBwoD",
          "QU5EEAASBgoCT1IQAUIGCgRsZWZ0QgcKBXJpZ2h0IrIBCg9TdHJpbmdDb25k",
          "aXRpb24SEgoKZmllbGRfcGF0aBgBIAMoCRINCgV2YWx1ZRgCIAEoCRIjCgR0",
          "eXBlGAMgASgOMhUuU3RyaW5nQ29uZGl0aW9uLlR5cGUSEwoLaXNfbmVnYXRp",
          "dmUYBCABKAgiQgoEVHlwZRIGCgJFURAAEgkKBU1BVENIEAESBgoCR1QQAhIG",
          "CgJHRRADEgYKAkxUEAQSBgoCTEUQBRIHCgNJRVEQBiKeAQoPTnVtYmVyQ29u",
          "ZGl0aW9uEhIKCmZpZWxkX3BhdGgYASADKAkSDQoFdmFsdWUYAiABKAESIwoE",
          "dHlwZRgDIAEoDjIVLk51bWJlckNvbmRpdGlvbi5UeXBlEhMKC2lzX25lZ2F0",
          "aXZlGAQgASgIIi4KBFR5cGUSBgoCRVEQABIGCgJHVBABEgYKAkdFEAISBgoC",
          "TFQQAxIGCgJMRRAEIjgKDU51bGxDb25kaXRpb24SEgoKZmllbGRfcGF0aBgB",
          "IAMoCRITCgtpc19uZWdhdGl2ZRgCIAEoCCKJAQoUU3RyaW5nQXJyYXlDb25k",
          "aXRpb24SEgoKZmllbGRfcGF0aBgBIAMoCRIOCgZ2YWx1ZXMYAiADKAkSKAoE",
          "dHlwZRgDIAEoDjIaLlN0cmluZ0FycmF5Q29uZGl0aW9uLlR5cGUSEwoLaXNf",
          "bmVnYXRpdmUYBCABKAgiDgoEVHlwZRIGCgJJThAAIokBChROdW1iZXJBcnJh",
          "eUNvbmRpdGlvbhISCgpmaWVsZF9wYXRoGAEgAygJEg4KBnZhbHVlcxgCIAMo",
          "ARIoCgR0eXBlGAMgASgOMhouTnVtYmVyQXJyYXlDb25kaXRpb24uVHlwZRIT",
          "Cgtpc19uZWdhdGl2ZRgEIAEoCCIOCgRUeXBlEgYKAklOEAAiXAoKUGFnaW5h",
          "dGlvbhISCgpwYWdlX3Rva2VuGAEgASgJEg4KBm9mZnNldBgCIAEoBRINCgVs",
          "aW1pdBgDIAEoBTobkkEYChYyEGF0bGFzLmFwaS5wYWdpbmeaAgEHIjwKCFBh",
          "Z2VJbmZvEhIKCnBhZ2VfdG9rZW4YASABKAkSDAoEc2l6ZRgCIAEoBRIOCgZv",
          "ZmZzZXQYAyABKAVCN1o1Z2l0aHViLmNvbS9pbmZvYmxveG9wZW4vYXRsYXMt",
          "YXBwLXRvb2xraXQvcXVlcnk7cXVlcnliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Grpc.Gateway.ProtocGenSwagger.Options.AnnotationsReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SortCriteria), global::SortCriteria.Parser, new[]{ "Tag", "Order" }, null, new[]{ typeof(global::SortCriteria.Types.Order) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Sorting), global::Sorting.Parser, new[]{ "Criterias" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FieldSelection), global::FieldSelection.Parser, new[]{ "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::Field), global::Field.Parser, new[]{ "Name", "Subs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::Filtering), global::Filtering.Parser, new[]{ "Operator", "StringCondition", "NumberCondition", "NullCondition", "StringArrayCondition", "NumberArrayCondition" }, new[]{ "Root" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LogicalOperator), global::LogicalOperator.Parser, new[]{ "LeftOperator", "LeftStringCondition", "LeftNumberCondition", "LeftNullCondition", "LeftStringArrayCondition", "LeftNumberArrayCondition", "RightOperator", "RightStringCondition", "RightNumberCondition", "RightNullCondition", "RightStringArrayCondition", "RightNumberArrayCondition", "Type", "IsNegative" }, new[]{ "Left", "Right" }, new[]{ typeof(global::LogicalOperator.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StringCondition), global::StringCondition.Parser, new[]{ "FieldPath", "Value", "Type", "IsNegative" }, null, new[]{ typeof(global::StringCondition.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NumberCondition), global::NumberCondition.Parser, new[]{ "FieldPath", "Value", "Type", "IsNegative" }, null, new[]{ typeof(global::NumberCondition.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NullCondition), global::NullCondition.Parser, new[]{ "FieldPath", "IsNegative" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StringArrayCondition), global::StringArrayCondition.Parser, new[]{ "FieldPath", "Values", "Type", "IsNegative" }, null, new[]{ typeof(global::StringArrayCondition.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NumberArrayCondition), global::NumberArrayCondition.Parser, new[]{ "FieldPath", "Values", "Type", "IsNegative" }, null, new[]{ typeof(global::NumberArrayCondition.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Pagination), global::Pagination.Parser, new[]{ "PageToken", "Offset", "Limit" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PageInfo), global::PageInfo.Parser, new[]{ "PageToken", "Size", "Offset" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// SortCriteria represents sort criteria
/// </summary>
public sealed partial class SortCriteria : pb::IMessage<SortCriteria> {
  private static readonly pb::MessageParser<SortCriteria> _parser = new pb::MessageParser<SortCriteria>(() => new SortCriteria());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SortCriteria> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SortCriteria() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SortCriteria(SortCriteria other) : this() {
    tag_ = other.tag_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SortCriteria Clone() {
    return new SortCriteria(this);
  }

  /// <summary>Field number for the "tag" field.</summary>
  public const int TagFieldNumber = 1;
  private string tag_ = "";
  /// <summary>
  /// Tag is a JSON tag.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Tag {
    get { return tag_; }
    set {
      tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 2;
  private global::SortCriteria.Types.Order order_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SortCriteria.Types.Order Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SortCriteria);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SortCriteria other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tag != other.Tag) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Tag.Length != 0) hash ^= Tag.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Tag.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Tag);
    }
    if (Order != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Tag.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SortCriteria other) {
    if (other == null) {
      return;
    }
    if (other.Tag.Length != 0) {
      Tag = other.Tag;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Tag = input.ReadString();
          break;
        }
        case 16: {
          Order = (global::SortCriteria.Types.Order) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SortCriteria message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    /// <summary>
    /// Order is a sort order.
    /// </summary>
    public enum Order {
      /// <summary>
      /// ascending sort order
      /// </summary>
      [pbr::OriginalName("ASC")] Asc = 0,
      /// <summary>
      /// descending sort order
      /// </summary>
      [pbr::OriginalName("DESC")] Desc = 1,
    }

  }
  #endregion

}

/// <summary>
/// Sorting represents list of sort criterias.
/// </summary>
public sealed partial class Sorting : pb::IMessage<Sorting> {
  private static readonly pb::MessageParser<Sorting> _parser = new pb::MessageParser<Sorting>(() => new Sorting());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Sorting> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Sorting() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Sorting(Sorting other) : this() {
    criterias_ = other.criterias_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Sorting Clone() {
    return new Sorting(this);
  }

  /// <summary>Field number for the "criterias" field.</summary>
  public const int CriteriasFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SortCriteria> _repeated_criterias_codec
      = pb::FieldCodec.ForMessage(10, global::SortCriteria.Parser);
  private readonly pbc::RepeatedField<global::SortCriteria> criterias_ = new pbc::RepeatedField<global::SortCriteria>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SortCriteria> Criterias {
    get { return criterias_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Sorting);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Sorting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!criterias_.Equals(other.criterias_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= criterias_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    criterias_.WriteTo(output, _repeated_criterias_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += criterias_.CalculateSize(_repeated_criterias_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Sorting other) {
    if (other == null) {
      return;
    }
    criterias_.Add(other.criterias_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          criterias_.AddEntriesFrom(input, _repeated_criterias_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// FieldSelection represents a group of fields for some object.
/// Main use case for if is to store information about object fields that
/// need to be ratained prior to sending object as a response
/// </summary>
public sealed partial class FieldSelection : pb::IMessage<FieldSelection> {
  private static readonly pb::MessageParser<FieldSelection> _parser = new pb::MessageParser<FieldSelection>(() => new FieldSelection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FieldSelection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldSelection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldSelection(FieldSelection other) : this() {
    fields_ = other.fields_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldSelection Clone() {
    return new FieldSelection(this);
  }

  /// <summary>Field number for the "fields" field.</summary>
  public const int FieldsFieldNumber = 1;
  private static readonly pbc::MapField<string, global::Field>.Codec _map_fields_codec
      = new pbc::MapField<string, global::Field>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Field.Parser), 10);
  private readonly pbc::MapField<string, global::Field> fields_ = new pbc::MapField<string, global::Field>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<string, global::Field> Fields {
    get { return fields_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FieldSelection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FieldSelection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Fields.Equals(other.Fields)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Fields.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fields_.WriteTo(output, _map_fields_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fields_.CalculateSize(_map_fields_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FieldSelection other) {
    if (other == null) {
      return;
    }
    fields_.Add(other.fields_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fields_.AddEntriesFrom(input, _map_fields_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Field represents a single field for an object.
/// It contains fields name and also may contain a group of sub-fields for cases
/// when a fields represents some structure.
/// </summary>
public sealed partial class Field : pb::IMessage<Field> {
  private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Field> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Field() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Field(Field other) : this() {
    name_ = other.name_;
    subs_ = other.subs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Field Clone() {
    return new Field(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "subs" field.</summary>
  public const int SubsFieldNumber = 2;
  private static readonly pbc::MapField<string, global::Field>.Codec _map_subs_codec
      = new pbc::MapField<string, global::Field>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Field.Parser), 18);
  private readonly pbc::MapField<string, global::Field> subs_ = new pbc::MapField<string, global::Field>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<string, global::Field> Subs {
    get { return subs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Field);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Field other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (!Subs.Equals(other.Subs)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= Subs.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    subs_.WriteTo(output, _map_subs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += subs_.CalculateSize(_map_subs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Field other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    subs_.Add(other.subs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          subs_.AddEntriesFrom(input, _map_subs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Filtering represents filtering expression.
/// root could be either LogicalOperator or one of the supported conditions.
/// </summary>
public sealed partial class Filtering : pb::IMessage<Filtering> {
  private static readonly pb::MessageParser<Filtering> _parser = new pb::MessageParser<Filtering>(() => new Filtering());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Filtering> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Filtering() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Filtering(Filtering other) : this() {
    switch (other.RootCase) {
      case RootOneofCase.Operator:
        Operator = other.Operator.Clone();
        break;
      case RootOneofCase.StringCondition:
        StringCondition = other.StringCondition.Clone();
        break;
      case RootOneofCase.NumberCondition:
        NumberCondition = other.NumberCondition.Clone();
        break;
      case RootOneofCase.NullCondition:
        NullCondition = other.NullCondition.Clone();
        break;
      case RootOneofCase.StringArrayCondition:
        StringArrayCondition = other.StringArrayCondition.Clone();
        break;
      case RootOneofCase.NumberArrayCondition:
        NumberArrayCondition = other.NumberArrayCondition.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Filtering Clone() {
    return new Filtering(this);
  }

  /// <summary>Field number for the "operator" field.</summary>
  public const int OperatorFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LogicalOperator Operator {
    get { return rootCase_ == RootOneofCase.Operator ? (global::LogicalOperator) root_ : null; }
    set {
      root_ = value;
      rootCase_ = value == null ? RootOneofCase.None : RootOneofCase.Operator;
    }
  }

  /// <summary>Field number for the "string_condition" field.</summary>
  public const int StringConditionFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringCondition StringCondition {
    get { return rootCase_ == RootOneofCase.StringCondition ? (global::StringCondition) root_ : null; }
    set {
      root_ = value;
      rootCase_ = value == null ? RootOneofCase.None : RootOneofCase.StringCondition;
    }
  }

  /// <summary>Field number for the "number_condition" field.</summary>
  public const int NumberConditionFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberCondition NumberCondition {
    get { return rootCase_ == RootOneofCase.NumberCondition ? (global::NumberCondition) root_ : null; }
    set {
      root_ = value;
      rootCase_ = value == null ? RootOneofCase.None : RootOneofCase.NumberCondition;
    }
  }

  /// <summary>Field number for the "null_condition" field.</summary>
  public const int NullConditionFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NullCondition NullCondition {
    get { return rootCase_ == RootOneofCase.NullCondition ? (global::NullCondition) root_ : null; }
    set {
      root_ = value;
      rootCase_ = value == null ? RootOneofCase.None : RootOneofCase.NullCondition;
    }
  }

  /// <summary>Field number for the "string_array_condition" field.</summary>
  public const int StringArrayConditionFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringArrayCondition StringArrayCondition {
    get { return rootCase_ == RootOneofCase.StringArrayCondition ? (global::StringArrayCondition) root_ : null; }
    set {
      root_ = value;
      rootCase_ = value == null ? RootOneofCase.None : RootOneofCase.StringArrayCondition;
    }
  }

  /// <summary>Field number for the "number_array_condition" field.</summary>
  public const int NumberArrayConditionFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberArrayCondition NumberArrayCondition {
    get { return rootCase_ == RootOneofCase.NumberArrayCondition ? (global::NumberArrayCondition) root_ : null; }
    set {
      root_ = value;
      rootCase_ = value == null ? RootOneofCase.None : RootOneofCase.NumberArrayCondition;
    }
  }

  private object root_;
  /// <summary>Enum of possible cases for the "root" oneof.</summary>
  public enum RootOneofCase {
    None = 0,
    Operator = 1,
    StringCondition = 2,
    NumberCondition = 3,
    NullCondition = 4,
    StringArrayCondition = 5,
    NumberArrayCondition = 6,
  }
  private RootOneofCase rootCase_ = RootOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RootOneofCase RootCase {
    get { return rootCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRoot() {
    rootCase_ = RootOneofCase.None;
    root_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Filtering);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Filtering other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Operator, other.Operator)) return false;
    if (!object.Equals(StringCondition, other.StringCondition)) return false;
    if (!object.Equals(NumberCondition, other.NumberCondition)) return false;
    if (!object.Equals(NullCondition, other.NullCondition)) return false;
    if (!object.Equals(StringArrayCondition, other.StringArrayCondition)) return false;
    if (!object.Equals(NumberArrayCondition, other.NumberArrayCondition)) return false;
    if (RootCase != other.RootCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (rootCase_ == RootOneofCase.Operator) hash ^= Operator.GetHashCode();
    if (rootCase_ == RootOneofCase.StringCondition) hash ^= StringCondition.GetHashCode();
    if (rootCase_ == RootOneofCase.NumberCondition) hash ^= NumberCondition.GetHashCode();
    if (rootCase_ == RootOneofCase.NullCondition) hash ^= NullCondition.GetHashCode();
    if (rootCase_ == RootOneofCase.StringArrayCondition) hash ^= StringArrayCondition.GetHashCode();
    if (rootCase_ == RootOneofCase.NumberArrayCondition) hash ^= NumberArrayCondition.GetHashCode();
    hash ^= (int) rootCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (rootCase_ == RootOneofCase.Operator) {
      output.WriteRawTag(10);
      output.WriteMessage(Operator);
    }
    if (rootCase_ == RootOneofCase.StringCondition) {
      output.WriteRawTag(18);
      output.WriteMessage(StringCondition);
    }
    if (rootCase_ == RootOneofCase.NumberCondition) {
      output.WriteRawTag(26);
      output.WriteMessage(NumberCondition);
    }
    if (rootCase_ == RootOneofCase.NullCondition) {
      output.WriteRawTag(34);
      output.WriteMessage(NullCondition);
    }
    if (rootCase_ == RootOneofCase.StringArrayCondition) {
      output.WriteRawTag(42);
      output.WriteMessage(StringArrayCondition);
    }
    if (rootCase_ == RootOneofCase.NumberArrayCondition) {
      output.WriteRawTag(50);
      output.WriteMessage(NumberArrayCondition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (rootCase_ == RootOneofCase.Operator) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operator);
    }
    if (rootCase_ == RootOneofCase.StringCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringCondition);
    }
    if (rootCase_ == RootOneofCase.NumberCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumberCondition);
    }
    if (rootCase_ == RootOneofCase.NullCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullCondition);
    }
    if (rootCase_ == RootOneofCase.StringArrayCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringArrayCondition);
    }
    if (rootCase_ == RootOneofCase.NumberArrayCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumberArrayCondition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Filtering other) {
    if (other == null) {
      return;
    }
    switch (other.RootCase) {
      case RootOneofCase.Operator:
        if (Operator == null) {
          Operator = new global::LogicalOperator();
        }
        Operator.MergeFrom(other.Operator);
        break;
      case RootOneofCase.StringCondition:
        if (StringCondition == null) {
          StringCondition = new global::StringCondition();
        }
        StringCondition.MergeFrom(other.StringCondition);
        break;
      case RootOneofCase.NumberCondition:
        if (NumberCondition == null) {
          NumberCondition = new global::NumberCondition();
        }
        NumberCondition.MergeFrom(other.NumberCondition);
        break;
      case RootOneofCase.NullCondition:
        if (NullCondition == null) {
          NullCondition = new global::NullCondition();
        }
        NullCondition.MergeFrom(other.NullCondition);
        break;
      case RootOneofCase.StringArrayCondition:
        if (StringArrayCondition == null) {
          StringArrayCondition = new global::StringArrayCondition();
        }
        StringArrayCondition.MergeFrom(other.StringArrayCondition);
        break;
      case RootOneofCase.NumberArrayCondition:
        if (NumberArrayCondition == null) {
          NumberArrayCondition = new global::NumberArrayCondition();
        }
        NumberArrayCondition.MergeFrom(other.NumberArrayCondition);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::LogicalOperator subBuilder = new global::LogicalOperator();
          if (rootCase_ == RootOneofCase.Operator) {
            subBuilder.MergeFrom(Operator);
          }
          input.ReadMessage(subBuilder);
          Operator = subBuilder;
          break;
        }
        case 18: {
          global::StringCondition subBuilder = new global::StringCondition();
          if (rootCase_ == RootOneofCase.StringCondition) {
            subBuilder.MergeFrom(StringCondition);
          }
          input.ReadMessage(subBuilder);
          StringCondition = subBuilder;
          break;
        }
        case 26: {
          global::NumberCondition subBuilder = new global::NumberCondition();
          if (rootCase_ == RootOneofCase.NumberCondition) {
            subBuilder.MergeFrom(NumberCondition);
          }
          input.ReadMessage(subBuilder);
          NumberCondition = subBuilder;
          break;
        }
        case 34: {
          global::NullCondition subBuilder = new global::NullCondition();
          if (rootCase_ == RootOneofCase.NullCondition) {
            subBuilder.MergeFrom(NullCondition);
          }
          input.ReadMessage(subBuilder);
          NullCondition = subBuilder;
          break;
        }
        case 42: {
          global::StringArrayCondition subBuilder = new global::StringArrayCondition();
          if (rootCase_ == RootOneofCase.StringArrayCondition) {
            subBuilder.MergeFrom(StringArrayCondition);
          }
          input.ReadMessage(subBuilder);
          StringArrayCondition = subBuilder;
          break;
        }
        case 50: {
          global::NumberArrayCondition subBuilder = new global::NumberArrayCondition();
          if (rootCase_ == RootOneofCase.NumberArrayCondition) {
            subBuilder.MergeFrom(NumberArrayCondition);
          }
          input.ReadMessage(subBuilder);
          NumberArrayCondition = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
/// LogicalOperator represents binary logical operator, either AND or OR depending on type.
/// left and right are respectively left and right operands of the operator, could be
/// either LogicalOperator or one of the supported conditions.
/// is_negative is set to true if the operator is negated.
/// </summary>
public sealed partial class LogicalOperator : pb::IMessage<LogicalOperator> {
  private static readonly pb::MessageParser<LogicalOperator> _parser = new pb::MessageParser<LogicalOperator>(() => new LogicalOperator());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LogicalOperator> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicalOperator() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicalOperator(LogicalOperator other) : this() {
    type_ = other.type_;
    isNegative_ = other.isNegative_;
    switch (other.LeftCase) {
      case LeftOneofCase.LeftOperator:
        LeftOperator = other.LeftOperator.Clone();
        break;
      case LeftOneofCase.LeftStringCondition:
        LeftStringCondition = other.LeftStringCondition.Clone();
        break;
      case LeftOneofCase.LeftNumberCondition:
        LeftNumberCondition = other.LeftNumberCondition.Clone();
        break;
      case LeftOneofCase.LeftNullCondition:
        LeftNullCondition = other.LeftNullCondition.Clone();
        break;
      case LeftOneofCase.LeftStringArrayCondition:
        LeftStringArrayCondition = other.LeftStringArrayCondition.Clone();
        break;
      case LeftOneofCase.LeftNumberArrayCondition:
        LeftNumberArrayCondition = other.LeftNumberArrayCondition.Clone();
        break;
    }

    switch (other.RightCase) {
      case RightOneofCase.RightOperator:
        RightOperator = other.RightOperator.Clone();
        break;
      case RightOneofCase.RightStringCondition:
        RightStringCondition = other.RightStringCondition.Clone();
        break;
      case RightOneofCase.RightNumberCondition:
        RightNumberCondition = other.RightNumberCondition.Clone();
        break;
      case RightOneofCase.RightNullCondition:
        RightNullCondition = other.RightNullCondition.Clone();
        break;
      case RightOneofCase.RightStringArrayCondition:
        RightStringArrayCondition = other.RightStringArrayCondition.Clone();
        break;
      case RightOneofCase.RightNumberArrayCondition:
        RightNumberArrayCondition = other.RightNumberArrayCondition.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicalOperator Clone() {
    return new LogicalOperator(this);
  }

  /// <summary>Field number for the "left_operator" field.</summary>
  public const int LeftOperatorFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LogicalOperator LeftOperator {
    get { return leftCase_ == LeftOneofCase.LeftOperator ? (global::LogicalOperator) left_ : null; }
    set {
      left_ = value;
      leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftOperator;
    }
  }

  /// <summary>Field number for the "left_string_condition" field.</summary>
  public const int LeftStringConditionFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringCondition LeftStringCondition {
    get { return leftCase_ == LeftOneofCase.LeftStringCondition ? (global::StringCondition) left_ : null; }
    set {
      left_ = value;
      leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftStringCondition;
    }
  }

  /// <summary>Field number for the "left_number_condition" field.</summary>
  public const int LeftNumberConditionFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberCondition LeftNumberCondition {
    get { return leftCase_ == LeftOneofCase.LeftNumberCondition ? (global::NumberCondition) left_ : null; }
    set {
      left_ = value;
      leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftNumberCondition;
    }
  }

  /// <summary>Field number for the "left_null_condition" field.</summary>
  public const int LeftNullConditionFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NullCondition LeftNullCondition {
    get { return leftCase_ == LeftOneofCase.LeftNullCondition ? (global::NullCondition) left_ : null; }
    set {
      left_ = value;
      leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftNullCondition;
    }
  }

  /// <summary>Field number for the "left_string_array_condition" field.</summary>
  public const int LeftStringArrayConditionFieldNumber = 11;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringArrayCondition LeftStringArrayCondition {
    get { return leftCase_ == LeftOneofCase.LeftStringArrayCondition ? (global::StringArrayCondition) left_ : null; }
    set {
      left_ = value;
      leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftStringArrayCondition;
    }
  }

  /// <summary>Field number for the "left_number_array_condition" field.</summary>
  public const int LeftNumberArrayConditionFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberArrayCondition LeftNumberArrayCondition {
    get { return leftCase_ == LeftOneofCase.LeftNumberArrayCondition ? (global::NumberArrayCondition) left_ : null; }
    set {
      left_ = value;
      leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftNumberArrayCondition;
    }
  }

  /// <summary>Field number for the "right_operator" field.</summary>
  public const int RightOperatorFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LogicalOperator RightOperator {
    get { return rightCase_ == RightOneofCase.RightOperator ? (global::LogicalOperator) right_ : null; }
    set {
      right_ = value;
      rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightOperator;
    }
  }

  /// <summary>Field number for the "right_string_condition" field.</summary>
  public const int RightStringConditionFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringCondition RightStringCondition {
    get { return rightCase_ == RightOneofCase.RightStringCondition ? (global::StringCondition) right_ : null; }
    set {
      right_ = value;
      rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightStringCondition;
    }
  }

  /// <summary>Field number for the "right_number_condition" field.</summary>
  public const int RightNumberConditionFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberCondition RightNumberCondition {
    get { return rightCase_ == RightOneofCase.RightNumberCondition ? (global::NumberCondition) right_ : null; }
    set {
      right_ = value;
      rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightNumberCondition;
    }
  }

  /// <summary>Field number for the "right_null_condition" field.</summary>
  public const int RightNullConditionFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NullCondition RightNullCondition {
    get { return rightCase_ == RightOneofCase.RightNullCondition ? (global::NullCondition) right_ : null; }
    set {
      right_ = value;
      rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightNullCondition;
    }
  }

  /// <summary>Field number for the "right_string_array_condition" field.</summary>
  public const int RightStringArrayConditionFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringArrayCondition RightStringArrayCondition {
    get { return rightCase_ == RightOneofCase.RightStringArrayCondition ? (global::StringArrayCondition) right_ : null; }
    set {
      right_ = value;
      rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightStringArrayCondition;
    }
  }

  /// <summary>Field number for the "right_number_array_condition" field.</summary>
  public const int RightNumberArrayConditionFieldNumber = 14;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberArrayCondition RightNumberArrayCondition {
    get { return rightCase_ == RightOneofCase.RightNumberArrayCondition ? (global::NumberArrayCondition) right_ : null; }
    set {
      right_ = value;
      rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightNumberArrayCondition;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 9;
  private global::LogicalOperator.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LogicalOperator.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "is_negative" field.</summary>
  public const int IsNegativeFieldNumber = 10;
  private bool isNegative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNegative {
    get { return isNegative_; }
    set {
      isNegative_ = value;
    }
  }

  private object left_;
  /// <summary>Enum of possible cases for the "left" oneof.</summary>
  public enum LeftOneofCase {
    None = 0,
    LeftOperator = 1,
    LeftStringCondition = 2,
    LeftNumberCondition = 3,
    LeftNullCondition = 4,
    LeftStringArrayCondition = 11,
    LeftNumberArrayCondition = 12,
  }
  private LeftOneofCase leftCase_ = LeftOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LeftOneofCase LeftCase {
    get { return leftCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLeft() {
    leftCase_ = LeftOneofCase.None;
    left_ = null;
  }

  private object right_;
  /// <summary>Enum of possible cases for the "right" oneof.</summary>
  public enum RightOneofCase {
    None = 0,
    RightOperator = 5,
    RightStringCondition = 6,
    RightNumberCondition = 7,
    RightNullCondition = 8,
    RightStringArrayCondition = 13,
    RightNumberArrayCondition = 14,
  }
  private RightOneofCase rightCase_ = RightOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RightOneofCase RightCase {
    get { return rightCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRight() {
    rightCase_ = RightOneofCase.None;
    right_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LogicalOperator);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LogicalOperator other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LeftOperator, other.LeftOperator)) return false;
    if (!object.Equals(LeftStringCondition, other.LeftStringCondition)) return false;
    if (!object.Equals(LeftNumberCondition, other.LeftNumberCondition)) return false;
    if (!object.Equals(LeftNullCondition, other.LeftNullCondition)) return false;
    if (!object.Equals(LeftStringArrayCondition, other.LeftStringArrayCondition)) return false;
    if (!object.Equals(LeftNumberArrayCondition, other.LeftNumberArrayCondition)) return false;
    if (!object.Equals(RightOperator, other.RightOperator)) return false;
    if (!object.Equals(RightStringCondition, other.RightStringCondition)) return false;
    if (!object.Equals(RightNumberCondition, other.RightNumberCondition)) return false;
    if (!object.Equals(RightNullCondition, other.RightNullCondition)) return false;
    if (!object.Equals(RightStringArrayCondition, other.RightStringArrayCondition)) return false;
    if (!object.Equals(RightNumberArrayCondition, other.RightNumberArrayCondition)) return false;
    if (Type != other.Type) return false;
    if (IsNegative != other.IsNegative) return false;
    if (LeftCase != other.LeftCase) return false;
    if (RightCase != other.RightCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (leftCase_ == LeftOneofCase.LeftOperator) hash ^= LeftOperator.GetHashCode();
    if (leftCase_ == LeftOneofCase.LeftStringCondition) hash ^= LeftStringCondition.GetHashCode();
    if (leftCase_ == LeftOneofCase.LeftNumberCondition) hash ^= LeftNumberCondition.GetHashCode();
    if (leftCase_ == LeftOneofCase.LeftNullCondition) hash ^= LeftNullCondition.GetHashCode();
    if (leftCase_ == LeftOneofCase.LeftStringArrayCondition) hash ^= LeftStringArrayCondition.GetHashCode();
    if (leftCase_ == LeftOneofCase.LeftNumberArrayCondition) hash ^= LeftNumberArrayCondition.GetHashCode();
    if (rightCase_ == RightOneofCase.RightOperator) hash ^= RightOperator.GetHashCode();
    if (rightCase_ == RightOneofCase.RightStringCondition) hash ^= RightStringCondition.GetHashCode();
    if (rightCase_ == RightOneofCase.RightNumberCondition) hash ^= RightNumberCondition.GetHashCode();
    if (rightCase_ == RightOneofCase.RightNullCondition) hash ^= RightNullCondition.GetHashCode();
    if (rightCase_ == RightOneofCase.RightStringArrayCondition) hash ^= RightStringArrayCondition.GetHashCode();
    if (rightCase_ == RightOneofCase.RightNumberArrayCondition) hash ^= RightNumberArrayCondition.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (IsNegative != false) hash ^= IsNegative.GetHashCode();
    hash ^= (int) leftCase_;
    hash ^= (int) rightCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (leftCase_ == LeftOneofCase.LeftOperator) {
      output.WriteRawTag(10);
      output.WriteMessage(LeftOperator);
    }
    if (leftCase_ == LeftOneofCase.LeftStringCondition) {
      output.WriteRawTag(18);
      output.WriteMessage(LeftStringCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftNumberCondition) {
      output.WriteRawTag(26);
      output.WriteMessage(LeftNumberCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftNullCondition) {
      output.WriteRawTag(34);
      output.WriteMessage(LeftNullCondition);
    }
    if (rightCase_ == RightOneofCase.RightOperator) {
      output.WriteRawTag(42);
      output.WriteMessage(RightOperator);
    }
    if (rightCase_ == RightOneofCase.RightStringCondition) {
      output.WriteRawTag(50);
      output.WriteMessage(RightStringCondition);
    }
    if (rightCase_ == RightOneofCase.RightNumberCondition) {
      output.WriteRawTag(58);
      output.WriteMessage(RightNumberCondition);
    }
    if (rightCase_ == RightOneofCase.RightNullCondition) {
      output.WriteRawTag(66);
      output.WriteMessage(RightNullCondition);
    }
    if (Type != 0) {
      output.WriteRawTag(72);
      output.WriteEnum((int) Type);
    }
    if (IsNegative != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsNegative);
    }
    if (leftCase_ == LeftOneofCase.LeftStringArrayCondition) {
      output.WriteRawTag(90);
      output.WriteMessage(LeftStringArrayCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftNumberArrayCondition) {
      output.WriteRawTag(98);
      output.WriteMessage(LeftNumberArrayCondition);
    }
    if (rightCase_ == RightOneofCase.RightStringArrayCondition) {
      output.WriteRawTag(106);
      output.WriteMessage(RightStringArrayCondition);
    }
    if (rightCase_ == RightOneofCase.RightNumberArrayCondition) {
      output.WriteRawTag(114);
      output.WriteMessage(RightNumberArrayCondition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (leftCase_ == LeftOneofCase.LeftOperator) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftOperator);
    }
    if (leftCase_ == LeftOneofCase.LeftStringCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftStringCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftNumberCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftNumberCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftNullCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftNullCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftStringArrayCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftStringArrayCondition);
    }
    if (leftCase_ == LeftOneofCase.LeftNumberArrayCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftNumberArrayCondition);
    }
    if (rightCase_ == RightOneofCase.RightOperator) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightOperator);
    }
    if (rightCase_ == RightOneofCase.RightStringCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightStringCondition);
    }
    if (rightCase_ == RightOneofCase.RightNumberCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightNumberCondition);
    }
    if (rightCase_ == RightOneofCase.RightNullCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightNullCondition);
    }
    if (rightCase_ == RightOneofCase.RightStringArrayCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightStringArrayCondition);
    }
    if (rightCase_ == RightOneofCase.RightNumberArrayCondition) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightNumberArrayCondition);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (IsNegative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LogicalOperator other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.IsNegative != false) {
      IsNegative = other.IsNegative;
    }
    switch (other.LeftCase) {
      case LeftOneofCase.LeftOperator:
        if (LeftOperator == null) {
          LeftOperator = new global::LogicalOperator();
        }
        LeftOperator.MergeFrom(other.LeftOperator);
        break;
      case LeftOneofCase.LeftStringCondition:
        if (LeftStringCondition == null) {
          LeftStringCondition = new global::StringCondition();
        }
        LeftStringCondition.MergeFrom(other.LeftStringCondition);
        break;
      case LeftOneofCase.LeftNumberCondition:
        if (LeftNumberCondition == null) {
          LeftNumberCondition = new global::NumberCondition();
        }
        LeftNumberCondition.MergeFrom(other.LeftNumberCondition);
        break;
      case LeftOneofCase.LeftNullCondition:
        if (LeftNullCondition == null) {
          LeftNullCondition = new global::NullCondition();
        }
        LeftNullCondition.MergeFrom(other.LeftNullCondition);
        break;
      case LeftOneofCase.LeftStringArrayCondition:
        if (LeftStringArrayCondition == null) {
          LeftStringArrayCondition = new global::StringArrayCondition();
        }
        LeftStringArrayCondition.MergeFrom(other.LeftStringArrayCondition);
        break;
      case LeftOneofCase.LeftNumberArrayCondition:
        if (LeftNumberArrayCondition == null) {
          LeftNumberArrayCondition = new global::NumberArrayCondition();
        }
        LeftNumberArrayCondition.MergeFrom(other.LeftNumberArrayCondition);
        break;
    }

    switch (other.RightCase) {
      case RightOneofCase.RightOperator:
        if (RightOperator == null) {
          RightOperator = new global::LogicalOperator();
        }
        RightOperator.MergeFrom(other.RightOperator);
        break;
      case RightOneofCase.RightStringCondition:
        if (RightStringCondition == null) {
          RightStringCondition = new global::StringCondition();
        }
        RightStringCondition.MergeFrom(other.RightStringCondition);
        break;
      case RightOneofCase.RightNumberCondition:
        if (RightNumberCondition == null) {
          RightNumberCondition = new global::NumberCondition();
        }
        RightNumberCondition.MergeFrom(other.RightNumberCondition);
        break;
      case RightOneofCase.RightNullCondition:
        if (RightNullCondition == null) {
          RightNullCondition = new global::NullCondition();
        }
        RightNullCondition.MergeFrom(other.RightNullCondition);
        break;
      case RightOneofCase.RightStringArrayCondition:
        if (RightStringArrayCondition == null) {
          RightStringArrayCondition = new global::StringArrayCondition();
        }
        RightStringArrayCondition.MergeFrom(other.RightStringArrayCondition);
        break;
      case RightOneofCase.RightNumberArrayCondition:
        if (RightNumberArrayCondition == null) {
          RightNumberArrayCondition = new global::NumberArrayCondition();
        }
        RightNumberArrayCondition.MergeFrom(other.RightNumberArrayCondition);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::LogicalOperator subBuilder = new global::LogicalOperator();
          if (leftCase_ == LeftOneofCase.LeftOperator) {
            subBuilder.MergeFrom(LeftOperator);
          }
          input.ReadMessage(subBuilder);
          LeftOperator = subBuilder;
          break;
        }
        case 18: {
          global::StringCondition subBuilder = new global::StringCondition();
          if (leftCase_ == LeftOneofCase.LeftStringCondition) {
            subBuilder.MergeFrom(LeftStringCondition);
          }
          input.ReadMessage(subBuilder);
          LeftStringCondition = subBuilder;
          break;
        }
        case 26: {
          global::NumberCondition subBuilder = new global::NumberCondition();
          if (leftCase_ == LeftOneofCase.LeftNumberCondition) {
            subBuilder.MergeFrom(LeftNumberCondition);
          }
          input.ReadMessage(subBuilder);
          LeftNumberCondition = subBuilder;
          break;
        }
        case 34: {
          global::NullCondition subBuilder = new global::NullCondition();
          if (leftCase_ == LeftOneofCase.LeftNullCondition) {
            subBuilder.MergeFrom(LeftNullCondition);
          }
          input.ReadMessage(subBuilder);
          LeftNullCondition = subBuilder;
          break;
        }
        case 42: {
          global::LogicalOperator subBuilder = new global::LogicalOperator();
          if (rightCase_ == RightOneofCase.RightOperator) {
            subBuilder.MergeFrom(RightOperator);
          }
          input.ReadMessage(subBuilder);
          RightOperator = subBuilder;
          break;
        }
        case 50: {
          global::StringCondition subBuilder = new global::StringCondition();
          if (rightCase_ == RightOneofCase.RightStringCondition) {
            subBuilder.MergeFrom(RightStringCondition);
          }
          input.ReadMessage(subBuilder);
          RightStringCondition = subBuilder;
          break;
        }
        case 58: {
          global::NumberCondition subBuilder = new global::NumberCondition();
          if (rightCase_ == RightOneofCase.RightNumberCondition) {
            subBuilder.MergeFrom(RightNumberCondition);
          }
          input.ReadMessage(subBuilder);
          RightNumberCondition = subBuilder;
          break;
        }
        case 66: {
          global::NullCondition subBuilder = new global::NullCondition();
          if (rightCase_ == RightOneofCase.RightNullCondition) {
            subBuilder.MergeFrom(RightNullCondition);
          }
          input.ReadMessage(subBuilder);
          RightNullCondition = subBuilder;
          break;
        }
        case 72: {
          Type = (global::LogicalOperator.Types.Type) input.ReadEnum();
          break;
        }
        case 80: {
          IsNegative = input.ReadBool();
          break;
        }
        case 90: {
          global::StringArrayCondition subBuilder = new global::StringArrayCondition();
          if (leftCase_ == LeftOneofCase.LeftStringArrayCondition) {
            subBuilder.MergeFrom(LeftStringArrayCondition);
          }
          input.ReadMessage(subBuilder);
          LeftStringArrayCondition = subBuilder;
          break;
        }
        case 98: {
          global::NumberArrayCondition subBuilder = new global::NumberArrayCondition();
          if (leftCase_ == LeftOneofCase.LeftNumberArrayCondition) {
            subBuilder.MergeFrom(LeftNumberArrayCondition);
          }
          input.ReadMessage(subBuilder);
          LeftNumberArrayCondition = subBuilder;
          break;
        }
        case 106: {
          global::StringArrayCondition subBuilder = new global::StringArrayCondition();
          if (rightCase_ == RightOneofCase.RightStringArrayCondition) {
            subBuilder.MergeFrom(RightStringArrayCondition);
          }
          input.ReadMessage(subBuilder);
          RightStringArrayCondition = subBuilder;
          break;
        }
        case 114: {
          global::NumberArrayCondition subBuilder = new global::NumberArrayCondition();
          if (rightCase_ == RightOneofCase.RightNumberArrayCondition) {
            subBuilder.MergeFrom(RightNumberArrayCondition);
          }
          input.ReadMessage(subBuilder);
          RightNumberArrayCondition = subBuilder;
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the LogicalOperator message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("AND")] And = 0,
      [pbr::OriginalName("OR")] Or = 1,
    }

  }
  #endregion

}

/// <summary>
/// StringCondition represents a condition with a string literal, e.g. field == 'string'.
/// field_path is a reference to a value of a resource.
/// value is the string literal.
/// type is a type of the condition.
/// is_negative is set to true if the condition is negated.
/// </summary>
public sealed partial class StringCondition : pb::IMessage<StringCondition> {
  private static readonly pb::MessageParser<StringCondition> _parser = new pb::MessageParser<StringCondition>(() => new StringCondition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StringCondition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StringCondition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StringCondition(StringCondition other) : this() {
    fieldPath_ = other.fieldPath_.Clone();
    value_ = other.value_;
    type_ = other.type_;
    isNegative_ = other.isNegative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StringCondition Clone() {
    return new StringCondition(this);
  }

  /// <summary>Field number for the "field_path" field.</summary>
  public const int FieldPathFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_fieldPath_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> fieldPath_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> FieldPath {
    get { return fieldPath_; }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::StringCondition.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringCondition.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "is_negative" field.</summary>
  public const int IsNegativeFieldNumber = 4;
  private bool isNegative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNegative {
    get { return isNegative_; }
    set {
      isNegative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StringCondition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StringCondition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fieldPath_.Equals(other.fieldPath_)) return false;
    if (Value != other.Value) return false;
    if (Type != other.Type) return false;
    if (IsNegative != other.IsNegative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fieldPath_.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (IsNegative != false) hash ^= IsNegative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fieldPath_.WriteTo(output, _repeated_fieldPath_codec);
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    if (IsNegative != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsNegative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fieldPath_.CalculateSize(_repeated_fieldPath_codec);
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (IsNegative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StringCondition other) {
    if (other == null) {
      return;
    }
    fieldPath_.Add(other.fieldPath_);
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.IsNegative != false) {
      IsNegative = other.IsNegative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fieldPath_.AddEntriesFrom(input, _repeated_fieldPath_codec);
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
        case 24: {
          Type = (global::StringCondition.Types.Type) input.ReadEnum();
          break;
        }
        case 32: {
          IsNegative = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the StringCondition message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("EQ")] Eq = 0,
      [pbr::OriginalName("MATCH")] Match = 1,
      [pbr::OriginalName("GT")] Gt = 2,
      [pbr::OriginalName("GE")] Ge = 3,
      [pbr::OriginalName("LT")] Lt = 4,
      [pbr::OriginalName("LE")] Le = 5,
      [pbr::OriginalName("IEQ")] Ieq = 6,
    }

  }
  #endregion

}

/// <summary>
/// NumberCondition represents a condition with a number literal, e.g. field > 3.
/// field_path is a reference to a value of a resource.
/// value is the number literal.
/// type is a type of the condition.
/// is_negative is set to true if the condition is negated.
/// </summary>
public sealed partial class NumberCondition : pb::IMessage<NumberCondition> {
  private static readonly pb::MessageParser<NumberCondition> _parser = new pb::MessageParser<NumberCondition>(() => new NumberCondition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NumberCondition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NumberCondition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NumberCondition(NumberCondition other) : this() {
    fieldPath_ = other.fieldPath_.Clone();
    value_ = other.value_;
    type_ = other.type_;
    isNegative_ = other.isNegative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NumberCondition Clone() {
    return new NumberCondition(this);
  }

  /// <summary>Field number for the "field_path" field.</summary>
  public const int FieldPathFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_fieldPath_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> fieldPath_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> FieldPath {
    get { return fieldPath_; }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private double value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::NumberCondition.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberCondition.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "is_negative" field.</summary>
  public const int IsNegativeFieldNumber = 4;
  private bool isNegative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNegative {
    get { return isNegative_; }
    set {
      isNegative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NumberCondition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NumberCondition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fieldPath_.Equals(other.fieldPath_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
    if (Type != other.Type) return false;
    if (IsNegative != other.IsNegative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fieldPath_.GetHashCode();
    if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
    if (Type != 0) hash ^= Type.GetHashCode();
    if (IsNegative != false) hash ^= IsNegative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fieldPath_.WriteTo(output, _repeated_fieldPath_codec);
    if (Value != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Value);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    if (IsNegative != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsNegative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fieldPath_.CalculateSize(_repeated_fieldPath_codec);
    if (Value != 0D) {
      size += 1 + 8;
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (IsNegative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NumberCondition other) {
    if (other == null) {
      return;
    }
    fieldPath_.Add(other.fieldPath_);
    if (other.Value != 0D) {
      Value = other.Value;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.IsNegative != false) {
      IsNegative = other.IsNegative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fieldPath_.AddEntriesFrom(input, _repeated_fieldPath_codec);
          break;
        }
        case 17: {
          Value = input.ReadDouble();
          break;
        }
        case 24: {
          Type = (global::NumberCondition.Types.Type) input.ReadEnum();
          break;
        }
        case 32: {
          IsNegative = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the NumberCondition message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("EQ")] Eq = 0,
      [pbr::OriginalName("GT")] Gt = 1,
      [pbr::OriginalName("GE")] Ge = 2,
      [pbr::OriginalName("LT")] Lt = 3,
      [pbr::OriginalName("LE")] Le = 4,
    }

  }
  #endregion

}

/// <summary>
/// NullCondition represents a condition with a null literal, e.g. field == null.
/// field_path is a reference to a value of a resource.
/// is_negative is set to true if the condition is negated.
/// </summary>
public sealed partial class NullCondition : pb::IMessage<NullCondition> {
  private static readonly pb::MessageParser<NullCondition> _parser = new pb::MessageParser<NullCondition>(() => new NullCondition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NullCondition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NullCondition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NullCondition(NullCondition other) : this() {
    fieldPath_ = other.fieldPath_.Clone();
    isNegative_ = other.isNegative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NullCondition Clone() {
    return new NullCondition(this);
  }

  /// <summary>Field number for the "field_path" field.</summary>
  public const int FieldPathFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_fieldPath_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> fieldPath_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> FieldPath {
    get { return fieldPath_; }
  }

  /// <summary>Field number for the "is_negative" field.</summary>
  public const int IsNegativeFieldNumber = 2;
  private bool isNegative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNegative {
    get { return isNegative_; }
    set {
      isNegative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NullCondition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NullCondition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fieldPath_.Equals(other.fieldPath_)) return false;
    if (IsNegative != other.IsNegative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fieldPath_.GetHashCode();
    if (IsNegative != false) hash ^= IsNegative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fieldPath_.WriteTo(output, _repeated_fieldPath_codec);
    if (IsNegative != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsNegative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fieldPath_.CalculateSize(_repeated_fieldPath_codec);
    if (IsNegative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NullCondition other) {
    if (other == null) {
      return;
    }
    fieldPath_.Add(other.fieldPath_);
    if (other.IsNegative != false) {
      IsNegative = other.IsNegative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fieldPath_.AddEntriesFrom(input, _repeated_fieldPath_codec);
          break;
        }
        case 16: {
          IsNegative = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// StringArrayCondition represents a condition with string arrays, e.g. field in ['hello','world']
/// field_path is a reference to a value of a resource.
/// is_negative is set to true if the condition is negated
/// </summary>
public sealed partial class StringArrayCondition : pb::IMessage<StringArrayCondition> {
  private static readonly pb::MessageParser<StringArrayCondition> _parser = new pb::MessageParser<StringArrayCondition>(() => new StringArrayCondition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StringArrayCondition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StringArrayCondition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StringArrayCondition(StringArrayCondition other) : this() {
    fieldPath_ = other.fieldPath_.Clone();
    values_ = other.values_.Clone();
    type_ = other.type_;
    isNegative_ = other.isNegative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StringArrayCondition Clone() {
    return new StringArrayCondition(this);
  }

  /// <summary>Field number for the "field_path" field.</summary>
  public const int FieldPathFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_fieldPath_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> fieldPath_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> FieldPath {
    get { return fieldPath_; }
  }

  /// <summary>Field number for the "values" field.</summary>
  public const int ValuesFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_values_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Values {
    get { return values_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::StringArrayCondition.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StringArrayCondition.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "is_negative" field.</summary>
  public const int IsNegativeFieldNumber = 4;
  private bool isNegative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNegative {
    get { return isNegative_; }
    set {
      isNegative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StringArrayCondition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StringArrayCondition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fieldPath_.Equals(other.fieldPath_)) return false;
    if(!values_.Equals(other.values_)) return false;
    if (Type != other.Type) return false;
    if (IsNegative != other.IsNegative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fieldPath_.GetHashCode();
    hash ^= values_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (IsNegative != false) hash ^= IsNegative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fieldPath_.WriteTo(output, _repeated_fieldPath_codec);
    values_.WriteTo(output, _repeated_values_codec);
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    if (IsNegative != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsNegative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fieldPath_.CalculateSize(_repeated_fieldPath_codec);
    size += values_.CalculateSize(_repeated_values_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (IsNegative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StringArrayCondition other) {
    if (other == null) {
      return;
    }
    fieldPath_.Add(other.fieldPath_);
    values_.Add(other.values_);
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.IsNegative != false) {
      IsNegative = other.IsNegative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fieldPath_.AddEntriesFrom(input, _repeated_fieldPath_codec);
          break;
        }
        case 18: {
          values_.AddEntriesFrom(input, _repeated_values_codec);
          break;
        }
        case 24: {
          Type = (global::StringArrayCondition.Types.Type) input.ReadEnum();
          break;
        }
        case 32: {
          IsNegative = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the StringArrayCondition message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("IN")] In = 0,
    }

  }
  #endregion

}

/// <summary>
/// NumberArrayCondition represents a condition with string arrays, e.g. field in [1, 5, 7]
/// field_path is a reference to a value of a resource.
/// is_negative is set to true if the condition is negated
/// </summary>
public sealed partial class NumberArrayCondition : pb::IMessage<NumberArrayCondition> {
  private static readonly pb::MessageParser<NumberArrayCondition> _parser = new pb::MessageParser<NumberArrayCondition>(() => new NumberArrayCondition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NumberArrayCondition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NumberArrayCondition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NumberArrayCondition(NumberArrayCondition other) : this() {
    fieldPath_ = other.fieldPath_.Clone();
    values_ = other.values_.Clone();
    type_ = other.type_;
    isNegative_ = other.isNegative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NumberArrayCondition Clone() {
    return new NumberArrayCondition(this);
  }

  /// <summary>Field number for the "field_path" field.</summary>
  public const int FieldPathFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_fieldPath_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> fieldPath_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> FieldPath {
    get { return fieldPath_; }
  }

  /// <summary>Field number for the "values" field.</summary>
  public const int ValuesFieldNumber = 2;
  private static readonly pb::FieldCodec<double> _repeated_values_codec
      = pb::FieldCodec.ForDouble(18);
  private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> Values {
    get { return values_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::NumberArrayCondition.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NumberArrayCondition.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "is_negative" field.</summary>
  public const int IsNegativeFieldNumber = 4;
  private bool isNegative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNegative {
    get { return isNegative_; }
    set {
      isNegative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NumberArrayCondition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NumberArrayCondition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fieldPath_.Equals(other.fieldPath_)) return false;
    if(!values_.Equals(other.values_)) return false;
    if (Type != other.Type) return false;
    if (IsNegative != other.IsNegative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fieldPath_.GetHashCode();
    hash ^= values_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (IsNegative != false) hash ^= IsNegative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fieldPath_.WriteTo(output, _repeated_fieldPath_codec);
    values_.WriteTo(output, _repeated_values_codec);
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    if (IsNegative != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsNegative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fieldPath_.CalculateSize(_repeated_fieldPath_codec);
    size += values_.CalculateSize(_repeated_values_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (IsNegative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NumberArrayCondition other) {
    if (other == null) {
      return;
    }
    fieldPath_.Add(other.fieldPath_);
    values_.Add(other.values_);
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.IsNegative != false) {
      IsNegative = other.IsNegative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fieldPath_.AddEntriesFrom(input, _repeated_fieldPath_codec);
          break;
        }
        case 18:
        case 17: {
          values_.AddEntriesFrom(input, _repeated_values_codec);
          break;
        }
        case 24: {
          Type = (global::NumberArrayCondition.Types.Type) input.ReadEnum();
          break;
        }
        case 32: {
          IsNegative = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the NumberArrayCondition message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("IN")] In = 0,
    }

  }
  #endregion

}

/// <summary>
/// Pagination represents both server-driven and client-driven pagination request.
/// Server-driven pagination is a model in which the server returns some
/// amount of data along with an token indicating there is more data
/// and where subsequent queries can get the next page of data.
/// Client-driven pagination is a model in which rows are addressable by
/// offset and page size (limit).
/// </summary>
public sealed partial class Pagination : pb::IMessage<Pagination> {
  private static readonly pb::MessageParser<Pagination> _parser = new pb::MessageParser<Pagination>(() => new Pagination());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Pagination> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pagination() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pagination(Pagination other) : this() {
    pageToken_ = other.pageToken_;
    offset_ = other.offset_;
    limit_ = other.limit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pagination Clone() {
    return new Pagination(this);
  }

  /// <summary>Field number for the "page_token" field.</summary>
  public const int PageTokenFieldNumber = 1;
  private string pageToken_ = "";
  /// <summary>
  /// The service-defined string used to identify a page of resources.
  /// A null value indicates the first page.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PageToken {
    get { return pageToken_; }
    set {
      pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offset" field.</summary>
  public const int OffsetFieldNumber = 2;
  private int offset_;
  /// <summary>
  /// The integer index of the offset into a collection of resources.
  /// If omitted or null the value is assumed to be "0".
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Offset {
    get { return offset_; }
    set {
      offset_ = value;
    }
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 3;
  private int limit_;
  /// <summary>
  /// The integer number of resources to be returned in the response.
  /// The service may impose maximum value.
  /// If omitted the service may impose a default value.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Limit {
    get { return limit_; }
    set {
      limit_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Pagination);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Pagination other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PageToken != other.PageToken) return false;
    if (Offset != other.Offset) return false;
    if (Limit != other.Limit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
    if (Offset != 0) hash ^= Offset.GetHashCode();
    if (Limit != 0) hash ^= Limit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PageToken.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PageToken);
    }
    if (Offset != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Offset);
    }
    if (Limit != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Limit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PageToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
    }
    if (Offset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
    }
    if (Limit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Pagination other) {
    if (other == null) {
      return;
    }
    if (other.PageToken.Length != 0) {
      PageToken = other.PageToken;
    }
    if (other.Offset != 0) {
      Offset = other.Offset;
    }
    if (other.Limit != 0) {
      Limit = other.Limit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PageToken = input.ReadString();
          break;
        }
        case 16: {
          Offset = input.ReadInt32();
          break;
        }
        case 24: {
          Limit = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// PageInfo represents both server-driven and client-driven pagination response.
/// Server-driven pagination is a model in which the server returns some
/// amount of data along with an token indicating there is more data
/// and where subsequent queries can get the next page of data.
/// Client-driven pagination is a model in which rows are addressable by
/// offset and page size (limit).
/// </summary>
public sealed partial class PageInfo : pb::IMessage<PageInfo> {
  private static readonly pb::MessageParser<PageInfo> _parser = new pb::MessageParser<PageInfo>(() => new PageInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PageInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollectionOperatorsReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PageInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PageInfo(PageInfo other) : this() {
    pageToken_ = other.pageToken_;
    size_ = other.size_;
    offset_ = other.offset_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PageInfo Clone() {
    return new PageInfo(this);
  }

  /// <summary>Field number for the "page_token" field.</summary>
  public const int PageTokenFieldNumber = 1;
  private string pageToken_ = "";
  /// <summary>
  /// The service response should contain a string to indicate
  /// the next page of resources.
  /// A null value indicates no more pages.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PageToken {
    get { return pageToken_; }
    set {
      pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private int size_;
  /// <summary>
  /// The service may optionally include the total number of resources being paged.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "offset" field.</summary>
  public const int OffsetFieldNumber = 3;
  private int offset_;
  /// <summary>
  /// The service may optionally include the offset of the next page of resources.
  /// A null value indicates no more pages.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Offset {
    get { return offset_; }
    set {
      offset_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PageInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PageInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PageToken != other.PageToken) return false;
    if (Size != other.Size) return false;
    if (Offset != other.Offset) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    if (Offset != 0) hash ^= Offset.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PageToken.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PageToken);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Size);
    }
    if (Offset != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Offset);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PageToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
    }
    if (Offset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PageInfo other) {
    if (other == null) {
      return;
    }
    if (other.PageToken.Length != 0) {
      PageToken = other.PageToken;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    if (other.Offset != 0) {
      Offset = other.Offset;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PageToken = input.ReadString();
          break;
        }
        case 16: {
          Size = input.ReadInt32();
          break;
        }
        case 24: {
          Offset = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
